'use strict';

const bodyParser = require('body-parser');
const axios = require('axios');
const crypto = require('crypto');
const fs = require('fs');
const { parse: json2csv } = require('json2csv');
const mid = require('./middleware.js');
const creds = require('./credentials');
const db = require('./database.js');
const { name } = require('ejs');

const path = require('path');
const PDFDocument = require('pdfkit');

// Use PDFKit to generate PDF of sov-template.ejs
const generateSOVPDF = (data, callback) => {
    try {
        const doc = new PDFDocument({ margin: 50 });
        const buffers = [];

        doc.on('data', buffers.push.bind(buffers));
        doc.on('end', () => {
            const pdfBuffer = Buffer.concat(buffers);
            callback(null, pdfBuffer);
        });

        // Add header
        doc.fontSize(20).text(data.defaults.companyName, { align: 'center', bold: true });
        doc.fontSize(12).text(data.defaults.companyAddress, { align: 'center' });
        doc.moveDown(2);

        // Add SOV details
        doc.fontSize(16).text('Schedule of Values (SOV)', { align: 'center', underline: true });
        doc.moveDown();
        doc.fontSize(12).text(`SOV Name: ${data.sov.name}`, { continued: true }).text(`   SOV ID: ${data.sov.id}`);
        doc.text(`Total: $${data.sov.total}`, { continued: true }).text(`   Created At: ${new Date(data.sov.created_at).toLocaleDateString()}`);
        doc.moveDown(2);

        // Add customer details
        doc.fontSize(14).text('Customer Details', { underline: true });
        doc.moveDown();
        doc.fontSize(12).text(`Name: ${data.customer.givenName}`);
        doc.text(`Company: ${data.customer.CompanyName}`);
        doc.text(`Billing Address: ${data.customer.billing_address}`);
        doc.text(`Phone: ${data.customer.phone}`);
        doc.text(`Email: ${data.customer.invoice_email_address}`);
        doc.moveDown(2);

        // Add items table
        doc.fontSize(14).text('Items', { underline: true });
        doc.moveDown();
        data.items.forEach((item, index) => {
            doc.fontSize(12).text(`${index + 1}. ${item.description}`, { bold: true });
            doc.text(`   Total Contracted Amount: $${item.total_contracted_amount}`);
            doc.text(`   Previous Invoiced Amount: $${item.previous_invoiced_amount}`);
            doc.text(`   This Invoiced Amount: $${item.this_invoiced_amount}`);
            doc.moveDown();
        });

        // Add footer
      //  doc.moveDown(2);
      //  doc.fontSize(10).text(`Generated by ${data.defaults.sysName}`, { align: 'center', italic: true });
        doc.end();
    } catch (err) {
        console.error('Error generating SOV PDF:', err);
        callback(err);
    }
};

// Function to generate PDF for an invoice
const generateInvoicePdf = (data, callback) => {
    console.log('Generating invoice PDF with data:', data);
    try {
        const doc = new PDFDocument({ margin: 50 });
        const buffers = [];

        doc.on('data', buffers.push.bind(buffers));
        doc.on('end', () => {
            const pdfBuffer = Buffer.concat(buffers);
            const filePath = path.join(__dirname, 'output', `${Date.now()}.pdf`);

            fs.writeFile(filePath, pdfBuffer, (err) => {
                if (err) {
                    console.error('Error saving PDF file:', err);
                    callback(err);
                } else {
                    console.log(`PDF saved successfully at ${filePath}`);
                    callback(null, filePath);
                }
            });
        });

        doc.font("Helvetica");

        // Add header
        doc.fontSize(20).text(data.invoice.invoice_name, { align: 'center', underline: true });

        // add logo
        const logoPath = path.join(__dirname, 'public/sunpainting_logo_blue.png');
        if (fs.existsSync(logoPath)) {
            doc.image(logoPath, { align: 'center', width: 256 });
        } else {
            console.error('Logo file not found:', logoPath);
        }

        // Add company details if available
        if (data.defaults && data.defaults.companyName) {
            doc.fontSize(16).text(data.defaults.companyName, { align: 'center', bold: true });
        }

        if (data.defaults && data.defaults.companyAddress) {
            doc.fontSize(12).text(data.defaults.companyAddress, { align: 'center' });
        }
        doc.moveDown();
        // Add invoice details
        doc.fontSize(12).text(`Invoice Number: ${data.invoice.invoice_number || 'N/A'}`, { continued: true })
            .text(`   Date: ${new Date(data.invoice.created_at).toLocaleDateString() || 'N/A'}`);
        doc.moveDown();
        doc.text(`Customer Name: ${data.takeoff[0].customer_givenName || 'N/A'}`);
        doc.text(`Customer Company: ${data.takeoff[0].customer_CompanyName || 'N/A'}`);
        doc.text(`Billing Address: ${data.takeoff[0].customer_billing_address || 'N/A'}`);
        doc.moveDown(2);

        // Add items table
        doc.fontSize(14).text('Items', { underline: true });
        doc.moveDown();
        // Define table headers
        const tableTop = doc.y;
        const itemWidth = 200;
        const quantityWidth = 70;
        const costWidth = 100;
        const totalWidth = 300;

        doc.fontSize(12).text('Description', 50, tableTop, { bold: true });
        doc.text('Quantity', 50 + itemWidth, tableTop, { bold: true });
        doc.text('Cost per Unit', 50 + itemWidth + quantityWidth, tableTop, { bold: true });
        doc.text('Total', 50 + itemWidth + quantityWidth + costWidth, tableTop, { bold: true });

        // Draw a line under the headers
        doc.moveTo(50, tableTop + 15)
            .lineTo(50 + itemWidth + quantityWidth + costWidth + totalWidth, tableTop + 15)
            .stroke();

        // Add table rows
        let rowTop = tableTop + 25;
        data.invoice_items.forEach((item) => {
            doc.fontSize(12).text(item.description, 50, rowTop);
            doc.text(item.quantity, 50 + itemWidth, rowTop);
            doc.text(`$${item.cost}`, 50 + itemWidth + quantityWidth, rowTop);
            doc.text(`$${item.total}`, 50 + itemWidth + quantityWidth + costWidth, rowTop);
            rowTop += 20; // Move to the next row
        });

        // Add total amount
        doc.moveDown(2);
        doc.fontSize(14).text(`Total Amount: $${data.totalAmount}`, { align: 'right', bold: true });
        doc.moveDown(2);

        // Add footer
        doc.fontSize(10).text('Thank you for your business!', { align: 'center', italic: true });
        doc.end();
    } catch (err) {
        console.error('Error generating PDF:', err);
        callback(err);
    }
};

module.exports = {
    generateSOVPDF: generateSOVPDF,
    generateInvoicePdf: generateInvoicePdf,
};
